Index: src/main/java/com/aki/modfix/chunk/openGL/ChunkRenderTaskCompiler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/aki/modfix/chunk/openGL/ChunkRenderTaskCompiler.java b/src/main/java/com/aki/modfix/chunk/openGL/ChunkRenderTaskCompiler.java
--- a/src/main/java/com/aki/modfix/chunk/openGL/ChunkRenderTaskCompiler.java	
+++ b/src/main/java/com/aki/modfix/chunk/openGL/ChunkRenderTaskCompiler.java	(date 1691509397738)
@@ -146,7 +146,7 @@
             return bufferBuilder;
         }).toArray(BufferBuilder[]::new);
 
-        //this.dispatcher.runOnRenderThread(() -> {//テスト....
+        this.dispatcher.runOnRenderThread(() -> {//VBOテスト....
             try {
                 if (!this.getCancel()) {
                     this.chunkRender.setVisibility(visibilitySet);
@@ -167,7 +167,7 @@
             } finally {
                 freeBufferBuilder(bufferBuilderPack);
             }
-        //});
+        });
 
         return ChunkRenderTaskResult.SUCCESSFUL;
     }
Index: src/main/java/com/aki/modfix/chunk/GLSytem/GlDynamicVBO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/aki/modfix/chunk/GLSytem/GlDynamicVBO.java b/src/main/java/com/aki/modfix/chunk/GLSytem/GlDynamicVBO.java
--- a/src/main/java/com/aki/modfix/chunk/GLSytem/GlDynamicVBO.java	
+++ b/src/main/java/com/aki/modfix/chunk/GLSytem/GlDynamicVBO.java	(date 1691509383764)
@@ -19,7 +19,7 @@
      */
     //どうやって、全チャンクのすべての16立方体をずれなく設定するか...
     private LinkedList<ChunkSector> ChunkSectors = new LinkedList<>();
-    private LinkedList<ChunkSector> FreeChunkSectors = new LinkedList<>();
+    //private LinkedList<ChunkSector> FreeChunkSectors = new LinkedList<>();
 
     private int SectorMax = 0;
     private final int PerSectionBlock = 4096;
@@ -57,15 +57,11 @@
         if(SearchIndex != -1) {
             sector = this.FreeChunkSectors.get(SearchIndex);
             ChunkSector finalSector = sector;
-            System.out.println("Before FreeSize: " + this.FreeChunkSectors.size());
             this.FreeChunkSectors = Stream.concat(this.FreeChunkSectors.stream().limit(finalSector.getChunkOffsetIndex()), this.FreeChunkSectors.stream().skip(finalSector.getChunkOffsetIndex()).filter(i -> !finalSector.equals(i)).map(chunkSector -> chunkSector.setIndexBack((chunkSector.IsTentative() ? 0 : chunkSector.GetOriginChunkOffsetIndex()) + chunkSector.getIndexBack() + 1))).collect(Collectors.toCollection(LinkedList::new));
-            System.out.println("After FreeSize: " + this.FreeChunkSectors.size());
             this.ChunkSectors.add(finalSector.getChunkOffsetIndex(), finalSector);
             if(this.ChunkSectors.size() > 1)
                 this.ChunkSectors = Stream.concat(this.ChunkSectors.stream().limit(finalSector.getChunkOffsetIndex()), this.ChunkSectors.stream().skip(finalSector.getChunkOffsetIndex()).map(chunkSector -> chunkSector.setIndexBack(chunkSector.getIndexBack() - 1))).collect(Collectors.toCollection(LinkedList::new));
-        }/* else {
-
-        }*/
+        }
 
         System.out.println("Sector Origin: " + sector.GetOriginChunkOffsetIndex() + ", Index: " + sector.getChunkOffsetIndex() + ", First: " + sector.getVBOFirst() + ", Frame: " + GLUtils.getFrame());
 
